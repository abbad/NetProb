'''
Created on may 7, 2013

@author: Abbad

This module will call UDP server and TCP server.

'''

from subprocess import Popen
from time import sleep
from os import system, remove, listdir, pipe, fdopen, close, O_WRONLY, O_RDONLY
from os import path as osPath
from inspect import currentframe, getfile
from sys import path

# code to include subfolder modules (packages)
cmd_subfolder = osPath.realpath(osPath.abspath(osPath.join(osPath.split(getfile( currentframe() ))[0],"subfolder")))
if cmd_subfolder not in path:
	path.insert(0, cmd_subfolder)

from utilities.getChar import *
from utilities.user_pipes import preparePipes, closePipe

def cleanUp():
	'''
		delete all xml files that are generated by udp server.
	'''
	for files in listdir("."):
			if files.endswith(".xml"):
				remove(files)
				
def menu():
	
	p1 = None
	p2 = None
	
	while 1:
		print "Select one of the following:"
		print "1. start TCP Client"
		print "2. start UDP Server"
		print "3. quit"
		getch = Getch() 
		val = getch.__call__()
		if val == '1':
			p1 = launchTCPClient()
		if val == '2':
			p2 = launchUdpServer()
		if val == '3':
			try:
				if p1:
					p1.terminate()
				if p2:
					p2.terminate()
			except:
				print "error while terminating one of the processes"
			exit()
			
def launchTcpClient(pipearg):
	print 'Starting TCP client'
	args = ["python", "TCPClient.py", "-a", pipearg]
	return Popen(args, shell=False)
				
def launchUdpServer(notificationPeriod):
	print 'Starting UDP server'
	args =  ["python", "UDPserver.py", "-n", notificationPeriod]
	p2 = Popen(args, shell=False)


if __name__ == '__main__':
		
	# Create pipe for communication
	pipeout, pipein = pipe()

	pipearg, pipeHandler = preparePipes(pipein, pipeout)

	# Start child with argument indicating which FD/FH to read from
	TCPsubproc = launchTcpClient(pipearg)
	
	# Close write end of pipe in parent
	closePipe(pipein, pipeHandler)

	# Read from child (could be done with os.write, without os.fdopen)
	pipefh = fdopen(pipeout, 'r')
	message = pipefh.read()
	
	if(message[0:14] == "startUdpServer"):
		UDPServerSubProc = launchUdpServer(message[14:])  
	
	pipefh.close()

	# Wait for the child to finish
	TCPsubproc.wait()